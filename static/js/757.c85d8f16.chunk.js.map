{"version":3,"file":"static/js/757.c85d8f16.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","redux/contacts/contacts.selectors.js","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","page/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Form, Field } from 'formik';\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\nexport const Label = styled.label`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n  font-size: 21px;\n  color: #1035ac;\n  gap: 5px;\n\n  & p {\n    color: red;\n  }\n`;\nexport const FormButton = styled.button`\n  text-transform: uppercase;\n  font-size: 15px;\n  padding: 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: #1035ac;\n  color: white;\n  font-weight: 600;\n  box-shadow: rgba(0, 50, 255, 0.5) 0px 1px 8px;\n\n  &:is(:focus, :hover) {\n    background-color: #067038;\n  }\n`;\n","import styled from 'styled-components';\nexport const SectionWrapper = styled.section`\n  width: 450px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border-radius: 7px;\n  box-shadow: inset #1035ac 0 0 7px;\n  background-image: linear-gradient(55deg, #00bfff, #00ffff);\n  background-color: #87cefa;\n  gap: 16px;\n\n  & h2 {\n    color: #1035ac;\n    text-align: center;\n  }\n  &:first-child {\n    margin: 25px auto;\n  }\n`;\n","import { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper>\n      <h2>{title}</h2>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport { toast } from 'react-toastify';\nimport * as yup from 'yup';\n\nimport { addContact } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\n\nimport { FormButton, FormContainer, Input, Label } from './ContactsForm.styled';\n\nconst nameReg = \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst numReg =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameReg, 'Not valid').required('Required'),\n  number: yup.string().matches(numReg, 'Not valid').required('Required'),\n});\n\nexport const FormContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const submitForm = (values, actions) => {\n    actions.resetForm();\n\n    if (isDuplicate(values)) return;\n    toast.success(`${values.name} add to contacts.`);\n    dispatch(addContact(values));\n  };\n\n  const isDuplicate = values => {\n    const duplicateContactName = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (duplicateContactName) {\n      toast.error(`${duplicateContactName.name} is already in contacts`);\n      return true;\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={submitForm}\n    >\n      <FormContainer>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" placeholder=\"John\" />\n          <ErrorMessage name=\"name\" component={'p'} />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" placeholder=\"123-45-67\" />\n          <ErrorMessage name=\"number\" component={'p'} />\n        </Label>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormContainer>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  font-size: 18px;\n  font-weight: 500;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" onChange={e => dispatch(setFilter(e.target.value))} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  display: flex;\n  flex-direction: column;\n`;\nexport const TabletHead = styled.thead`\n  margin-bottom: 16px;\n  & tr {\n    display: flex;\n    padding: 3px;\n    gap: 15px;\n    & th:nth-child(1) {\n      width: 200px;\n      word-wrap: break-word;\n    }\n    & th:nth-child(2) {\n      width: 150px;\n      word-wrap: break-word;\n    }\n    & th:not(:last-child) {\n      border-bottom: 3px solid #1035ac;\n    }\n  }\n`;\n\nexport const TableBody = styled.tbody`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  text-align: center;\n`;\n\nexport const ItemRow = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 3px;\n  & td {\n    padding-bottom: 5px;\n  }\n  & td:nth-child(1) {\n    width: 200px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(2) {\n    width: 150px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(3) {\n    & button {\n      text-transform: uppercase;\n      font-size: 15px;\n      padding: 3px;\n      border-radius: 5px;\n      cursor: pointer;\n      background-color: #ed2939;\n      color: white;\n      font-weight: 600;\n      &:is(:focus, :hover) {\n        color: white;\n        background-color: #b11226;\n      }\n    }\n  }\n  & td:not(:last-child) {\n    border-bottom: 3px dashed #1035ac;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contacts.selectors';\nimport { deleteContact } from 'redux/contacts/contactsSlice';\n\nimport { ItemRow, Table, TableBody, TabletHead } from './ContactsList.styled';\nimport { toast } from 'react-toastify';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <>\n      <Table>\n        <TabletHead>\n          <tr>\n            <th>Name</th>\n            <th>Phone</th>\n            <th></th>\n          </tr>\n        </TabletHead>\n        <TableBody>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <ItemRow key={id}>\n                <td>{name}</td>\n                <td>{number}</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      toast(`❌ Contact «${name}» successfully deleted`, {\n                        autoClose: 3000,\n                      });\n                      return dispatch(deleteContact(id));\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </ItemRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </>\n  );\n};\n// import { useDispatch, useSelector } from 'react-redux';\n// import { selectVisibleContacts } from 'redux/contacts/contacts.selectors';\n// import { deleteContact } from 'redux/contacts/contactsSlice';\n\n// import { ItemRow, Table, TableBody, TabletHead } from './ContactsList.styled';\n\n// export const ContactsList = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectVisibleContacts);\n//   const onDeleteContact = id => dispatch(deleteContact(id));\n//   return (\n//     <>\n//       <Table>\n//         <TabletHead>\n//           <tr>\n//             <th>Name</th>\n//             <th>Phone</th>\n//             <th></th>\n//           </tr>\n//         </TabletHead>\n//         <TableBody>\n//           {contacts.map(({ id, name, number }) => {\n//             return (\n//               <ItemRow key={id}>\n//                 <td>{name}</td>\n//                 <td>{number}</td>\n//                 <td>\n//                   <button type=\"button\" onClick={() => onDeleteContact(id)}>\n//                     Delete\n//                   </button>\n//                 </td>\n//               </ItemRow>\n//             );\n//           })}\n//         </TableBody>\n//       </Table>\n//     </>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import { Text } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Oval } from 'react-loader-spinner';\n\nimport { FormContacts } from 'components/ContactsForm/ContactsForm';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Notification } from 'components/Notification/Notification';\n\nimport {\n  selectContacts,\n  selectContactsIsLoading,\n} from 'redux/contacts/contacts.selectors';\n\nimport { fetchAll } from 'redux/contacts/contactsSlice';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAll());\n  }, [dispatch]);\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <FormContacts />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts?.length ? (\n          <>\n            <Filter />\n            <ContactsList />\n          </>\n        ) : (\n          <Notification message=\"There is no contacts!\" />\n        )}\n        {isLoading && (\n          <Oval\n            height=\"50\"\n            width=\"50\"\n            color=\"violet\"\n            secondaryColor=\"blue\"\n            strokeWidth={3}\n            strokeWidthSecondary={3}\n          />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","Input","Field","_templateObject2","Label","_templateObject3","FormButton","_templateObject4","SectionWrapper","Section","_ref","title","children","_jsxs","_jsx","selectContacts","state","contacts","items","selectContactsIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","trim","schema","yup","shape","matches","required","number","FormContacts","useSelector","dispatch","useDispatch","isDuplicate","values","duplicateContactName","find","toast","concat","Formik","initialValues","validationSchema","onSubmit","actions","resetForm","addContact","type","placeholder","ErrorMessage","component","Filter","onChange","e","setFilter","target","value","Table","TabletHead","TableBody","ItemRow","ContactsList","_Fragment","map","id","onClick","autoClose","deleteContact","Text","Notification","message","useEffect","fetchAll","length","Oval","height","width","color","secondaryColor","strokeWidth","strokeWidthSecondary"],"sourceRoot":""}