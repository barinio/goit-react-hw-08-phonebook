{"version":3,"file":"static/js/343.c9c02512.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","redux/contacts/contacts.selectors.js","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactUpdate/ContactUpdate.styled.js","components/ContactUpdate/ContactUpdate.jsx","components/ContactsList/ContactsList.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","page/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Form, Field } from 'formik';\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\nexport const Label = styled.label`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n  font-size: 21px;\n  color: #1035ac;\n  gap: 5px;\n\n  & p {\n    color: red;\n  }\n`;\nexport const FormButton = styled.button`\n  text-transform: uppercase;\n  font-size: 15px;\n  padding: 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: #1035ac;\n  color: white;\n  font-weight: 600;\n  box-shadow: rgba(0, 50, 255, 0.5) 0px 1px 8px;\n\n  &:is(:focus, :hover) {\n    background-color: #067038;\n  }\n`;\n","import styled from 'styled-components';\nexport const SectionWrapper = styled.section`\n  width: 450px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border-radius: 7px;\n  box-shadow: inset #1035ac 0 0 7px;\n  background-image: linear-gradient(55deg, #00bfff, #00ffff);\n  background-color: #87cefa;\n  gap: 16px;\n\n  & h2 {\n    color: #1035ac;\n    text-align: center;\n  }\n  &:first-child {\n    margin: 25px auto;\n  }\n`;\n","import { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper>\n      <h2>{title}</h2>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectUpdateContact = state => state.item;\nexport const selectIsOpenModal = state => state.isOpenModal;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, ErrorMessage } from 'formik';\nimport { toast } from 'react-toastify';\nimport * as yup from 'yup';\n\nimport { addContact } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\n\nimport { FormButton, FormContainer, Input, Label } from './ContactsForm.styled';\n\nconst nameReg = \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst numReg =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameReg, 'Not valid').required('Required'),\n  number: yup.string().matches(numReg, 'Not valid').required('Required'),\n});\n\nexport const FormContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const submitForm = (values, actions) => {\n    actions.resetForm();\n\n    if (isDuplicate(values)) return;\n    toast.success(`${values.name} add to contacts.`);\n    dispatch(addContact(values));\n  };\n\n  const isDuplicate = values => {\n    const duplicateContactName = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (duplicateContactName) {\n      toast.error(`${duplicateContactName.name} is already in contacts`);\n      return true;\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={schema}\n      onSubmit={submitForm}\n    >\n      <FormContainer>\n        <Label>\n          Name\n          <Input type=\"text\" name=\"name\" placeholder=\"John\" />\n          <ErrorMessage name=\"name\" component={'p'} />\n        </Label>\n        <Label>\n          Number\n          <Input type=\"tel\" name=\"number\" placeholder=\"123-45-67\" />\n          <ErrorMessage name=\"number\" component={'p'} />\n        </Label>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </FormContainer>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  font-size: 18px;\n  font-weight: 500;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" onChange={e => dispatch(setFilter(e.target.value))} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  display: flex;\n  flex-direction: column;\n`;\nexport const TabletHead = styled.thead`\n  margin-bottom: 16px;\n  & tr {\n    display: flex;\n    padding: 3px;\n    gap: 15px;\n    & th:nth-child(1) {\n      width: 200px;\n      word-wrap: break-word;\n    }\n    & th:nth-child(2) {\n      width: 150px;\n      word-wrap: break-word;\n    }\n    & th:not(:last-child) {\n      border-bottom: 3px solid #1035ac;\n    }\n  }\n`;\n\nexport const TableBody = styled.tbody`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  text-align: center;\n`;\n\nexport const ItemRow = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 3px;\n  & td {\n    padding-bottom: 5px;\n  }\n  & td:nth-child(1) {\n    width: 200px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(2) {\n    width: 150px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(3) {\n    & button {\n      text-transform: uppercase;\n      font-size: 15px;\n      padding: 3px;\n      border-radius: 5px;\n      cursor: pointer;\n      background-color: #ed2939;\n      color: white;\n      font-weight: 600;\n      &:is(:focus, :hover) {\n        color: white;\n        background-color: #b11226;\n      }\n    }\n  }\n  & td:not(:last-child) {\n    border-bottom: 3px dashed #1035ac;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Caption = styled.h2`\n  text-align: center;\n  margin-bottom: 25px;\n  color: #1035ac;\n`;\n","import * as yup from 'yup';\n\nimport { toast } from 'react-toastify';\n\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nimport { ErrorMessage, Formik } from 'formik';\n\nimport {\n  FormButton,\n  FormContainer,\n  Input,\n  Label,\n} from '../ContactsForm/ContactsForm.styled';\nimport { updateContact } from 'redux/contacts/contactsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsOpenModal,\n  selectUpdateContact,\n} from 'redux/contacts/contacts.selectors';\n\nimport { setIsOpenModal } from 'redux/contacts/isOpenModalSlilce';\nimport { setItem } from 'redux/contacts/itemSlice';\nimport { Caption } from './ContactUpdate.styled';\n\nconst nameReg = \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\";\nconst numReg =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\n\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameReg, 'Not valid').required('Required'),\n  number: yup.string().matches(numReg, 'Not valid').required('Required'),\n});\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: ' lightblue ',\n  border: '0px solid #000',\n  borderRadius: '10px',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst ContactUpdate = () => {\n  const dispatch = useDispatch();\n\n  const updContact = useSelector(selectUpdateContact);\n\n  const open = useSelector(selectIsOpenModal);\n  const handleClose = () => dispatch(setIsOpenModal(false));\n\n  const submitForm = (values, actions) => {\n    actions.resetForm();\n    const { id } = updContact;\n    // if (condition) {\n    // }\n    dispatch(setItem(values));\n    toast(\n      `✅Contact «${updContact.name}» successfully changed to «${values.name}»`,\n      {\n        autoClose: 3000,\n      }\n    );\n\n    dispatch(updateContact({ id, values }));\n    handleClose();\n  };\n  return (\n    <>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Caption>Update contact</Caption>\n          <Formik\n            initialValues={{\n              name: updContact.name,\n              number: updContact.number,\n            }}\n            validationSchema={schema}\n            onSubmit={submitForm}\n          >\n            <FormContainer>\n              <Label>\n                {updContact.name}\n                <Input type=\"text\" name=\"name\" placeholder=\"John\" />\n                <ErrorMessage name=\"name\" component={'p'} />\n              </Label>\n              <Label>\n                {updContact.number}\n                <Input type=\"tel\" name=\"number\" placeholder=\"123-45-67\" />\n                <ErrorMessage name=\"number\" component={'p'} />\n              </Label>\n              <FormButton type=\"submit\">Update contact</FormButton>\n            </FormContainer>\n          </Formik>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactUpdate;\n","import { toast } from 'react-toastify';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/contacts.selectors';\nimport { deleteContact } from 'redux/contacts/contactsSlice';\n\nimport { ItemRow, Table, TableBody, TabletHead } from './ContactsList.styled';\nimport ContactUpdate from 'components/ContactUpdate/ContactUpdate';\nimport { setItem } from 'redux/contacts/itemSlice';\nimport { setIsOpenModal } from 'redux/contacts/isOpenModalSlilce';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  const handleOpen = contact => {\n    dispatch(setItem(contact));\n    dispatch(setIsOpenModal(true));\n  };\n\n  return (\n    <>\n      <Table>\n        <TabletHead>\n          <tr>\n            <th>Name</th>\n            <th>Phone</th>\n            <th></th>\n            <th></th>\n          </tr>\n        </TabletHead>\n        <TableBody>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <ItemRow key={id}>\n                <td onClick={() => handleOpen({ id, name, number })}>{name}</td>\n                <td onClick={() => handleOpen({ id, name, number })}>\n                  {number}\n                </td>\n\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      toast(`❌ Contact «${name}» successfully deleted`, {\n                        autoClose: 3000,\n                      });\n                      return dispatch(deleteContact(id));\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </ItemRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <ContactUpdate />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import { Text } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Oval } from 'react-loader-spinner';\n\nimport { FormContacts } from 'components/ContactsForm/ContactsForm';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Notification } from 'components/Notification/Notification';\n\nimport {\n  selectContacts,\n  selectContactsIsLoading,\n} from 'redux/contacts/contacts.selectors';\n\nimport { fetchAll } from 'redux/contacts/contactsSlice';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAll());\n  }, [dispatch]);\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <FormContacts />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts?.length ? (\n          <>\n            <Filter />\n            <ContactsList />\n          </>\n        ) : (\n          <Notification message=\"There is no contacts!\" />\n        )}\n        {isLoading && (\n          <Oval\n            height=\"50\"\n            width=\"50\"\n            color=\"violet\"\n            secondaryColor=\"blue\"\n            strokeWidth={3}\n            strokeWidthSecondary={3}\n          />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","Input","Field","_templateObject2","Label","_templateObject3","FormButton","_templateObject4","SectionWrapper","Section","_ref","title","children","_jsxs","_jsx","selectContacts","state","contacts","items","selectContactsIsLoading","isLoading","selectUpdateContact","item","selectIsOpenModal","isOpenModal","selectVisibleContacts","createSelector","filter","contact","_contact$name","name","toLowerCase","includes","trim","schema","yup","shape","matches","required","number","FormContacts","useSelector","dispatch","useDispatch","isDuplicate","values","duplicateContactName","find","toast","concat","Formik","initialValues","validationSchema","onSubmit","actions","resetForm","addContact","type","placeholder","ErrorMessage","component","Filter","onChange","e","setFilter","target","value","Table","TabletHead","TableBody","ItemRow","Caption","style","position","top","left","transform","width","bgcolor","border","borderRadius","boxShadow","p","updContact","open","handleClose","setIsOpenModal","_Fragment","Modal","onClose","Box","sx","id","setItem","autoClose","updateContact","ContactsList","handleOpen","map","onClick","deleteContact","ContactUpdate","Text","Notification","message","useEffect","fetchAll","length","Oval","height","color","secondaryColor","strokeWidth","strokeWidthSecondary"],"sourceRoot":""}